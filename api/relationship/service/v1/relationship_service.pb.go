// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/relationship/service/v1/relationship_service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FollowRequest struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ToUid                int64    `protobuf:"varint,2,opt,name=to_uid,json=toUid,proto3" json:"to_uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FollowRequest) Reset()         { *m = FollowRequest{} }
func (m *FollowRequest) String() string { return proto.CompactTextString(m) }
func (*FollowRequest) ProtoMessage()    {}
func (*FollowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7156a1a9e504d9f, []int{0}
}
func (m *FollowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowRequest.Merge(m, src)
}
func (m *FollowRequest) XXX_Size() int {
	return m.Size()
}
func (m *FollowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FollowRequest proto.InternalMessageInfo

func (m *FollowRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FollowRequest) GetToUid() int64 {
	if m != nil {
		return m.ToUid
	}
	return 0
}

type FollowItem struct {
	ToUid                int64    `protobuf:"varint,1,opt,name=to_uid,json=toUid,proto3" json:"to_uid,omitempty"`
	CreateTime           int64    `protobuf:"varint,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FollowItem) Reset()         { *m = FollowItem{} }
func (m *FollowItem) String() string { return proto.CompactTextString(m) }
func (*FollowItem) ProtoMessage()    {}
func (*FollowItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7156a1a9e504d9f, []int{1}
}
func (m *FollowItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowItem.Merge(m, src)
}
func (m *FollowItem) XXX_Size() int {
	return m.Size()
}
func (m *FollowItem) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowItem.DiscardUnknown(m)
}

var xxx_messageInfo_FollowItem proto.InternalMessageInfo

func (m *FollowItem) GetToUid() int64 {
	if m != nil {
		return m.ToUid
	}
	return 0
}

func (m *FollowItem) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

type FollowList struct {
	List                 []*FollowItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FollowList) Reset()         { *m = FollowList{} }
func (m *FollowList) String() string { return proto.CompactTextString(m) }
func (*FollowList) ProtoMessage()    {}
func (*FollowList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7156a1a9e504d9f, []int{2}
}
func (m *FollowList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowList.Merge(m, src)
}
func (m *FollowList) XXX_Size() int {
	return m.Size()
}
func (m *FollowList) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowList.DiscardUnknown(m)
}

var xxx_messageInfo_FollowList proto.InternalMessageInfo

func (m *FollowList) GetList() []*FollowItem {
	if m != nil {
		return m.List
	}
	return nil
}

type RelationRequest struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Uids                 []int64  `protobuf:"varint,2,rep,packed,name=uids,proto3" json:"uids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelationRequest) Reset()         { *m = RelationRequest{} }
func (m *RelationRequest) String() string { return proto.CompactTextString(m) }
func (*RelationRequest) ProtoMessage()    {}
func (*RelationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7156a1a9e504d9f, []int{3}
}
func (m *RelationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationRequest.Merge(m, src)
}
func (m *RelationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RelationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RelationRequest proto.InternalMessageInfo

func (m *RelationRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RelationRequest) GetUids() []int64 {
	if m != nil {
		return m.Uids
	}
	return nil
}

type RelationItem struct {
	Relation             int32    `protobuf:"varint,1,opt,name=relation,proto3" json:"relation,omitempty"`
	FollowTime           int64    `protobuf:"varint,2,opt,name=follow_time,json=followTime,proto3" json:"follow_time,omitempty"`
	FollowedTime         int64    `protobuf:"varint,3,opt,name=followed_time,json=followedTime,proto3" json:"followed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelationItem) Reset()         { *m = RelationItem{} }
func (m *RelationItem) String() string { return proto.CompactTextString(m) }
func (*RelationItem) ProtoMessage()    {}
func (*RelationItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7156a1a9e504d9f, []int{4}
}
func (m *RelationItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationItem.Merge(m, src)
}
func (m *RelationItem) XXX_Size() int {
	return m.Size()
}
func (m *RelationItem) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationItem.DiscardUnknown(m)
}

var xxx_messageInfo_RelationItem proto.InternalMessageInfo

func (m *RelationItem) GetRelation() int32 {
	if m != nil {
		return m.Relation
	}
	return 0
}

func (m *RelationItem) GetFollowTime() int64 {
	if m != nil {
		return m.FollowTime
	}
	return 0
}

func (m *RelationItem) GetFollowedTime() int64 {
	if m != nil {
		return m.FollowedTime
	}
	return 0
}

type RelationResponse struct {
	Rm                   map[int64]*RelationItem `protobuf:"bytes,1,rep,name=rm,proto3" json:"rm,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *RelationResponse) Reset()         { *m = RelationResponse{} }
func (m *RelationResponse) String() string { return proto.CompactTextString(m) }
func (*RelationResponse) ProtoMessage()    {}
func (*RelationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7156a1a9e504d9f, []int{5}
}
func (m *RelationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationResponse.Merge(m, src)
}
func (m *RelationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RelationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RelationResponse proto.InternalMessageInfo

func (m *RelationResponse) GetRm() map[int64]*RelationItem {
	if m != nil {
		return m.Rm
	}
	return nil
}

type ListRequest struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	LastId               int64    `protobuf:"varint,2,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7156a1a9e504d9f, []int{6}
}
func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ListRequest) GetLastId() int64 {
	if m != nil {
		return m.LastId
	}
	return 0
}

type ListResponse struct {
	List                 *FollowList `protobuf:"bytes,1,opt,name=list,proto3" json:"list,omitempty"`
	HasMore              bool        `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7156a1a9e504d9f, []int{7}
}
func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

func (m *ListResponse) GetList() *FollowList {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ListResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

type BatchRequest struct {
	Uids                 []int64  `protobuf:"varint,1,rep,packed,name=uids,proto3" json:"uids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchRequest) Reset()         { *m = BatchRequest{} }
func (m *BatchRequest) String() string { return proto.CompactTextString(m) }
func (*BatchRequest) ProtoMessage()    {}
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7156a1a9e504d9f, []int{8}
}
func (m *BatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchRequest.Merge(m, src)
}
func (m *BatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchRequest proto.InternalMessageInfo

func (m *BatchRequest) GetUids() []int64 {
	if m != nil {
		return m.Uids
	}
	return nil
}

type RelationCount struct {
	FollowCount          int32    `protobuf:"varint,1,opt,name=follow_count,json=followCount,proto3" json:"follow_count,omitempty"`
	FollowerCount        int32    `protobuf:"varint,2,opt,name=follower_count,json=followerCount,proto3" json:"follower_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelationCount) Reset()         { *m = RelationCount{} }
func (m *RelationCount) String() string { return proto.CompactTextString(m) }
func (*RelationCount) ProtoMessage()    {}
func (*RelationCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7156a1a9e504d9f, []int{9}
}
func (m *RelationCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationCount.Merge(m, src)
}
func (m *RelationCount) XXX_Size() int {
	return m.Size()
}
func (m *RelationCount) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationCount.DiscardUnknown(m)
}

var xxx_messageInfo_RelationCount proto.InternalMessageInfo

func (m *RelationCount) GetFollowCount() int32 {
	if m != nil {
		return m.FollowCount
	}
	return 0
}

func (m *RelationCount) GetFollowerCount() int32 {
	if m != nil {
		return m.FollowerCount
	}
	return 0
}

type CountResponse struct {
	RelationCount        map[int64]*RelationCount `protobuf:"bytes,1,rep,name=relation_count,json=relationCount,proto3" json:"relation_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CountResponse) Reset()         { *m = CountResponse{} }
func (m *CountResponse) String() string { return proto.CompactTextString(m) }
func (*CountResponse) ProtoMessage()    {}
func (*CountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7156a1a9e504d9f, []int{10}
}
func (m *CountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountResponse.Merge(m, src)
}
func (m *CountResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountResponse proto.InternalMessageInfo

func (m *CountResponse) GetRelationCount() map[int64]*RelationCount {
	if m != nil {
		return m.RelationCount
	}
	return nil
}

type UserFollowResponse struct {
	Fm                   map[int64]*FollowList `protobuf:"bytes,1,rep,name=fm,proto3" json:"fm,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UserFollowResponse) Reset()         { *m = UserFollowResponse{} }
func (m *UserFollowResponse) String() string { return proto.CompactTextString(m) }
func (*UserFollowResponse) ProtoMessage()    {}
func (*UserFollowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7156a1a9e504d9f, []int{11}
}
func (m *UserFollowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserFollowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserFollowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserFollowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserFollowResponse.Merge(m, src)
}
func (m *UserFollowResponse) XXX_Size() int {
	return m.Size()
}
func (m *UserFollowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserFollowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserFollowResponse proto.InternalMessageInfo

func (m *UserFollowResponse) GetFm() map[int64]*FollowList {
	if m != nil {
		return m.Fm
	}
	return nil
}

func init() {
	proto.RegisterType((*FollowRequest)(nil), "relationship.service.v1.FollowRequest")
	proto.RegisterType((*FollowItem)(nil), "relationship.service.v1.FollowItem")
	proto.RegisterType((*FollowList)(nil), "relationship.service.v1.FollowList")
	proto.RegisterType((*RelationRequest)(nil), "relationship.service.v1.RelationRequest")
	proto.RegisterType((*RelationItem)(nil), "relationship.service.v1.RelationItem")
	proto.RegisterType((*RelationResponse)(nil), "relationship.service.v1.RelationResponse")
	proto.RegisterMapType((map[int64]*RelationItem)(nil), "relationship.service.v1.RelationResponse.RmEntry")
	proto.RegisterType((*ListRequest)(nil), "relationship.service.v1.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "relationship.service.v1.ListResponse")
	proto.RegisterType((*BatchRequest)(nil), "relationship.service.v1.BatchRequest")
	proto.RegisterType((*RelationCount)(nil), "relationship.service.v1.RelationCount")
	proto.RegisterType((*CountResponse)(nil), "relationship.service.v1.CountResponse")
	proto.RegisterMapType((map[int64]*RelationCount)(nil), "relationship.service.v1.CountResponse.RelationCountEntry")
	proto.RegisterType((*UserFollowResponse)(nil), "relationship.service.v1.UserFollowResponse")
	proto.RegisterMapType((map[int64]*FollowList)(nil), "relationship.service.v1.UserFollowResponse.FmEntry")
}

func init() {
	proto.RegisterFile("api/relationship/service/v1/relationship_service.proto", fileDescriptor_b7156a1a9e504d9f)
}

var fileDescriptor_b7156a1a9e504d9f = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdf, 0x4e, 0x13, 0x4f,
	0x14, 0xfe, 0x4d, 0x4b, 0xff, 0xe4, 0xb4, 0x05, 0x32, 0xc9, 0x4f, 0x70, 0x4d, 0x2a, 0x2e, 0x42,
	0x6a, 0x4c, 0xb6, 0x16, 0x12, 0x01, 0xf1, 0x46, 0x10, 0x10, 0xa3, 0x37, 0xab, 0x5c, 0x48, 0x88,
	0x75, 0xdb, 0x4e, 0xe9, 0x86, 0xdd, 0x4e, 0x9d, 0x99, 0xd6, 0xf4, 0x25, 0xbc, 0xf6, 0x3d, 0x8c,
	0xef, 0xe0, 0xa5, 0xf7, 0xde, 0x18, 0x7c, 0x11, 0xb3, 0xf3, 0xa7, 0xdd, 0x8a, 0x6b, 0x6b, 0xc2,
	0xdd, 0xce, 0xe9, 0xf7, 0x9d, 0x73, 0xbe, 0xf9, 0xce, 0x9c, 0xc2, 0x43, 0xaf, 0xe7, 0x57, 0x19,
	0x09, 0x3c, 0xe1, 0xd3, 0x2e, 0xef, 0xf8, 0xbd, 0x2a, 0x27, 0x6c, 0xe0, 0x37, 0x49, 0x75, 0x50,
	0x9b, 0x88, 0xd7, 0x75, 0xdc, 0xe9, 0x31, 0x2a, 0x28, 0x5e, 0x8a, 0xff, 0xe6, 0x98, 0xdf, 0x06,
	0x35, 0xeb, 0xd6, 0x39, 0xa5, 0xe7, 0x01, 0xa9, 0x4a, 0x58, 0xa3, 0xdf, 0xae, 0x92, 0xb0, 0x27,
	0x86, 0x8a, 0x65, 0x6f, 0x43, 0xe9, 0x90, 0x06, 0x01, 0xfd, 0xe0, 0x92, 0xf7, 0x7d, 0xc2, 0x05,
	0x5e, 0x84, 0x74, 0xdf, 0x6f, 0x2d, 0xa3, 0x15, 0x54, 0x49, 0xbb, 0xd1, 0x27, 0xfe, 0x1f, 0xb2,
	0x82, 0xd6, 0xa3, 0x60, 0x4a, 0x06, 0x33, 0x82, 0x9e, 0xf8, 0x2d, 0xfb, 0x29, 0x80, 0x62, 0x1e,
	0x0b, 0x12, 0xc6, 0x40, 0x28, 0x06, 0xc2, 0xb7, 0xa1, 0xd0, 0x64, 0xc4, 0x13, 0xa4, 0x2e, 0xfc,
	0x90, 0xe8, 0x04, 0xa0, 0x42, 0xaf, 0xfd, 0x90, 0xd8, 0x07, 0x26, 0xcb, 0x0b, 0x9f, 0x0b, 0xbc,
	0x05, 0x73, 0x81, 0xcf, 0xc5, 0x32, 0x5a, 0x49, 0x57, 0x0a, 0x1b, 0xab, 0x4e, 0x82, 0x24, 0x67,
	0x5c, 0xd8, 0x95, 0x04, 0x7b, 0x0b, 0x16, 0x5c, 0x8d, 0x4d, 0x16, 0x82, 0x61, 0xae, 0xef, 0xb7,
	0xf8, 0x72, 0x6a, 0x25, 0x5d, 0x49, 0xbb, 0xf2, 0xdb, 0xee, 0x41, 0xd1, 0x10, 0xa5, 0x0e, 0x0b,
	0xf2, 0xa6, 0xa8, 0xa4, 0x66, 0xdc, 0xd1, 0x39, 0x12, 0xd3, 0x96, 0x85, 0x27, 0xc4, 0xa8, 0x50,
	0x24, 0x06, 0xaf, 0x42, 0x49, 0x9d, 0x48, 0x4b, 0x41, 0xd2, 0x12, 0x52, 0x34, 0x41, 0xa9, 0xf8,
	0x33, 0x82, 0xc5, 0x71, 0xaf, 0xbc, 0x47, 0xbb, 0x9c, 0xe0, 0x27, 0x90, 0x62, 0xa1, 0x96, 0x5d,
	0x4b, 0x94, 0xfd, 0x3b, 0xcd, 0x71, 0xc3, 0x83, 0xae, 0x60, 0x43, 0x37, 0xc5, 0x42, 0xeb, 0x0c,
	0x72, 0xfa, 0x18, 0x49, 0xbf, 0x20, 0x43, 0x23, 0xfd, 0x82, 0x0c, 0xf1, 0x2e, 0x64, 0x06, 0x5e,
	0xd0, 0x57, 0x4d, 0x17, 0x36, 0xd6, 0xa6, 0x96, 0x90, 0x77, 0xab, 0x38, 0x8f, 0x52, 0xdb, 0xc8,
	0xde, 0x86, 0x42, 0xe4, 0x50, 0xf2, 0xe5, 0x2e, 0x41, 0x2e, 0xf0, 0xb8, 0xa8, 0x8f, 0xc6, 0x24,
	0x1b, 0x1d, 0x8f, 0x5b, 0x76, 0x03, 0x8a, 0x8a, 0xa9, 0xa5, 0x8e, 0x3d, 0x46, 0x33, 0x78, 0x2c,
	0xa9, 0x92, 0x80, 0x6f, 0x42, 0xbe, 0xe3, 0xf1, 0x7a, 0x48, 0x99, 0x92, 0x91, 0x77, 0x73, 0x1d,
	0x8f, 0xbf, 0xa4, 0x8c, 0xd8, 0x36, 0x14, 0xf7, 0x3c, 0xd1, 0xec, 0x98, 0xf6, 0x8c, 0xd3, 0x28,
	0xe6, 0xf4, 0x1b, 0x28, 0x19, 0x71, 0xfb, 0xb4, 0xdf, 0x15, 0xf8, 0x0e, 0x68, 0x63, 0xea, 0xcd,
	0xe8, 0xac, 0xed, 0xd6, 0x16, 0x2b, 0xc8, 0x1a, 0xcc, 0x6b, 0xef, 0x98, 0x06, 0xa5, 0x24, 0xc8,
	0xd8, 0xcc, 0x24, 0xcc, 0xfe, 0x8e, 0xa0, 0x24, 0xbf, 0x46, 0x22, 0xdf, 0xc1, 0xbc, 0xd1, 0x35,
	0xca, 0x1e, 0x79, 0xbb, 0x93, 0x28, 0x77, 0x82, 0xef, 0x4c, 0x74, 0xaa, 0x3c, 0x2e, 0xb1, 0x78,
	0xcc, 0xea, 0x00, 0xbe, 0x0a, 0xfa, 0x83, 0xf3, 0x8f, 0x27, 0x9d, 0x5f, 0x9f, 0xea, 0xbc, 0x6a,
	0x24, 0x66, 0xfd, 0x17, 0x04, 0xf8, 0x84, 0x13, 0x66, 0xf6, 0x84, 0x96, 0xb8, 0x0f, 0xa9, 0xb6,
	0x19, 0xd9, 0xcd, 0xc4, 0xac, 0x57, 0x89, 0xce, 0xa1, 0x19, 0xda, 0x76, 0x68, 0x9d, 0x42, 0xee,
	0x30, 0x71, 0x68, 0x77, 0x26, 0x5b, 0x9f, 0x69, 0x54, 0xc6, 0x7d, 0x6f, 0x7c, 0xcc, 0x40, 0xc1,
	0x88, 0x7a, 0x35, 0x68, 0xe2, 0x67, 0x90, 0x55, 0x40, 0xbc, 0x3e, 0x25, 0x93, 0x1e, 0x23, 0xeb,
	0x86, 0xa3, 0x56, 0xa7, 0x63, 0x56, 0xa7, 0x73, 0x10, 0xad, 0x4e, 0xfc, 0x1c, 0xf2, 0x27, 0xdd,
	0xf6, 0xf5, 0xe4, 0x3a, 0x83, 0xd2, 0x11, 0x11, 0xb1, 0x1d, 0x78, 0x37, 0x31, 0x61, 0xec, 0x01,
	0x5a, 0x6b, 0x53, 0x50, 0xda, 0xa4, 0xb7, 0xb0, 0x30, 0xca, 0x4e, 0xd8, 0xf5, 0xe7, 0x6f, 0x40,
	0xe1, 0x88, 0x08, 0x73, 0xcb, 0xb8, 0x32, 0xc3, 0xea, 0x52, 0xf9, 0xef, 0xcd, 0xbc, 0xe4, 0xb0,
	0x07, 0x8b, 0xb1, 0x1a, 0xfa, 0x61, 0x26, 0xd2, 0xe3, 0x7b, 0xc0, 0x5a, 0x9f, 0xed, 0xb9, 0xe1,
	0x16, 0xcc, 0x1f, 0x11, 0x11, 0xcd, 0x2a, 0xd7, 0x23, 0x32, 0x63, 0x81, 0xfb, 0xff, 0x30, 0xf8,
	0x7b, 0x0f, 0xbe, 0x5e, 0x96, 0xd1, 0xb7, 0xcb, 0x32, 0xfa, 0x71, 0x59, 0x46, 0x9f, 0x7e, 0x96,
	0xff, 0x3b, 0x2d, 0xff, 0xe5, 0xbf, 0x7e, 0x77, 0x50, 0x6b, 0x64, 0xe5, 0xb0, 0x6c, 0xfe, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0xe8, 0x10, 0x66, 0x74, 0x14, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RelationSvcClient is the client API for RelationSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelationSvcClient interface {
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Unfollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFollowList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetFollowerList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	GetRelation(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*RelationResponse, error)
	GetRelationCount(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*CountResponse, error)
	GetUsersFollow(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*UserFollowResponse, error)
}

type relationSvcClient struct {
	cc *grpc.ClientConn
}

func NewRelationSvcClient(cc *grpc.ClientConn) RelationSvcClient {
	return &relationSvcClient{cc}
}

func (c *relationSvcClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/relationship.service.v1.RelationSvc/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationSvcClient) Unfollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/relationship.service.v1.RelationSvc/Unfollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationSvcClient) GetFollowList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/relationship.service.v1.RelationSvc/GetFollowList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationSvcClient) GetFollowerList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/relationship.service.v1.RelationSvc/GetFollowerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationSvcClient) GetRelation(ctx context.Context, in *RelationRequest, opts ...grpc.CallOption) (*RelationResponse, error) {
	out := new(RelationResponse)
	err := c.cc.Invoke(ctx, "/relationship.service.v1.RelationSvc/GetRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationSvcClient) GetRelationCount(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/relationship.service.v1.RelationSvc/GetRelationCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationSvcClient) GetUsersFollow(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*UserFollowResponse, error) {
	out := new(UserFollowResponse)
	err := c.cc.Invoke(ctx, "/relationship.service.v1.RelationSvc/GetUsersFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationSvcServer is the server API for RelationSvc service.
type RelationSvcServer interface {
	Follow(context.Context, *FollowRequest) (*emptypb.Empty, error)
	Unfollow(context.Context, *FollowRequest) (*emptypb.Empty, error)
	GetFollowList(context.Context, *ListRequest) (*ListResponse, error)
	GetFollowerList(context.Context, *ListRequest) (*ListResponse, error)
	GetRelation(context.Context, *RelationRequest) (*RelationResponse, error)
	GetRelationCount(context.Context, *BatchRequest) (*CountResponse, error)
	GetUsersFollow(context.Context, *BatchRequest) (*UserFollowResponse, error)
}

// UnimplementedRelationSvcServer can be embedded to have forward compatible implementations.
type UnimplementedRelationSvcServer struct {
}

func (*UnimplementedRelationSvcServer) Follow(ctx context.Context, req *FollowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (*UnimplementedRelationSvcServer) Unfollow(ctx context.Context, req *FollowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (*UnimplementedRelationSvcServer) GetFollowList(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowList not implemented")
}
func (*UnimplementedRelationSvcServer) GetFollowerList(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerList not implemented")
}
func (*UnimplementedRelationSvcServer) GetRelation(ctx context.Context, req *RelationRequest) (*RelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelation not implemented")
}
func (*UnimplementedRelationSvcServer) GetRelationCount(ctx context.Context, req *BatchRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationCount not implemented")
}
func (*UnimplementedRelationSvcServer) GetUsersFollow(ctx context.Context, req *BatchRequest) (*UserFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersFollow not implemented")
}

func RegisterRelationSvcServer(s *grpc.Server, srv RelationSvcServer) {
	s.RegisterService(&_RelationSvc_serviceDesc, srv)
}

func _RelationSvc_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationSvcServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationship.service.v1.RelationSvc/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationSvcServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationSvc_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationSvcServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationship.service.v1.RelationSvc/Unfollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationSvcServer).Unfollow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationSvc_GetFollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationSvcServer).GetFollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationship.service.v1.RelationSvc/GetFollowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationSvcServer).GetFollowList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationSvc_GetFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationSvcServer).GetFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationship.service.v1.RelationSvc/GetFollowerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationSvcServer).GetFollowerList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationSvc_GetRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationSvcServer).GetRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationship.service.v1.RelationSvc/GetRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationSvcServer).GetRelation(ctx, req.(*RelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationSvc_GetRelationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationSvcServer).GetRelationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationship.service.v1.RelationSvc/GetRelationCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationSvcServer).GetRelationCount(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationSvc_GetUsersFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationSvcServer).GetUsersFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relationship.service.v1.RelationSvc/GetUsersFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationSvcServer).GetUsersFollow(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RelationSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relationship.service.v1.RelationSvc",
	HandlerType: (*RelationSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Follow",
			Handler:    _RelationSvc_Follow_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _RelationSvc_Unfollow_Handler,
		},
		{
			MethodName: "GetFollowList",
			Handler:    _RelationSvc_GetFollowList_Handler,
		},
		{
			MethodName: "GetFollowerList",
			Handler:    _RelationSvc_GetFollowerList_Handler,
		},
		{
			MethodName: "GetRelation",
			Handler:    _RelationSvc_GetRelation_Handler,
		},
		{
			MethodName: "GetRelationCount",
			Handler:    _RelationSvc_GetRelationCount_Handler,
		},
		{
			MethodName: "GetUsersFollow",
			Handler:    _RelationSvc_GetUsersFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/relationship/service/v1/relationship_service.proto",
}

func (m *FollowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FollowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ToUid != 0 {
		i = encodeVarintRelationshipService(dAtA, i, uint64(m.ToUid))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintRelationshipService(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FollowItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FollowItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateTime != 0 {
		i = encodeVarintRelationshipService(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x10
	}
	if m.ToUid != 0 {
		i = encodeVarintRelationshipService(dAtA, i, uint64(m.ToUid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FollowList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FollowList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRelationshipService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RelationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uids) > 0 {
		dAtA2 := make([]byte, len(m.Uids)*10)
		var j1 int
		for _, num1 := range m.Uids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRelationshipService(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintRelationshipService(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RelationItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FollowedTime != 0 {
		i = encodeVarintRelationshipService(dAtA, i, uint64(m.FollowedTime))
		i--
		dAtA[i] = 0x18
	}
	if m.FollowTime != 0 {
		i = encodeVarintRelationshipService(dAtA, i, uint64(m.FollowTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Relation != 0 {
		i = encodeVarintRelationshipService(dAtA, i, uint64(m.Relation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RelationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rm) > 0 {
		for k := range m.Rm {
			v := m.Rm[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRelationshipService(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintRelationshipService(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRelationshipService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastId != 0 {
		i = encodeVarintRelationshipService(dAtA, i, uint64(m.LastId))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintRelationshipService(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasMore {
		i--
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.List != nil {
		{
			size, err := m.List.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRelationshipService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uids) > 0 {
		dAtA6 := make([]byte, len(m.Uids)*10)
		var j5 int
		for _, num1 := range m.Uids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintRelationshipService(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RelationCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FollowerCount != 0 {
		i = encodeVarintRelationshipService(dAtA, i, uint64(m.FollowerCount))
		i--
		dAtA[i] = 0x10
	}
	if m.FollowCount != 0 {
		i = encodeVarintRelationshipService(dAtA, i, uint64(m.FollowCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RelationCount) > 0 {
		for k := range m.RelationCount {
			v := m.RelationCount[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRelationshipService(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintRelationshipService(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRelationshipService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserFollowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserFollowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserFollowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Fm) > 0 {
		for k := range m.Fm {
			v := m.Fm[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintRelationshipService(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintRelationshipService(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintRelationshipService(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintRelationshipService(dAtA []byte, offset int, v uint64) int {
	offset -= sovRelationshipService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FollowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRelationshipService(uint64(m.Uid))
	}
	if m.ToUid != 0 {
		n += 1 + sovRelationshipService(uint64(m.ToUid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FollowItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ToUid != 0 {
		n += 1 + sovRelationshipService(uint64(m.ToUid))
	}
	if m.CreateTime != 0 {
		n += 1 + sovRelationshipService(uint64(m.CreateTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FollowList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovRelationshipService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RelationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRelationshipService(uint64(m.Uid))
	}
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovRelationshipService(uint64(e))
		}
		n += 1 + sovRelationshipService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RelationItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Relation != 0 {
		n += 1 + sovRelationshipService(uint64(m.Relation))
	}
	if m.FollowTime != 0 {
		n += 1 + sovRelationshipService(uint64(m.FollowTime))
	}
	if m.FollowedTime != 0 {
		n += 1 + sovRelationshipService(uint64(m.FollowedTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RelationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rm) > 0 {
		for k, v := range m.Rm {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRelationshipService(uint64(l))
			}
			mapEntrySize := 1 + sovRelationshipService(uint64(k)) + l
			n += mapEntrySize + 1 + sovRelationshipService(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRelationshipService(uint64(m.Uid))
	}
	if m.LastId != 0 {
		n += 1 + sovRelationshipService(uint64(m.LastId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.List != nil {
		l = m.List.Size()
		n += 1 + l + sovRelationshipService(uint64(l))
	}
	if m.HasMore {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovRelationshipService(uint64(e))
		}
		n += 1 + sovRelationshipService(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RelationCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FollowCount != 0 {
		n += 1 + sovRelationshipService(uint64(m.FollowCount))
	}
	if m.FollowerCount != 0 {
		n += 1 + sovRelationshipService(uint64(m.FollowerCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RelationCount) > 0 {
		for k, v := range m.RelationCount {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRelationshipService(uint64(l))
			}
			mapEntrySize := 1 + sovRelationshipService(uint64(k)) + l
			n += mapEntrySize + 1 + sovRelationshipService(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserFollowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fm) > 0 {
		for k, v := range m.Fm {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRelationshipService(uint64(l))
			}
			mapEntrySize := 1 + sovRelationshipService(uint64(k)) + l
			n += mapEntrySize + 1 + sovRelationshipService(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRelationshipService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRelationshipService(x uint64) (n int) {
	return sovRelationshipService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FollowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUid", wireType)
			}
			m.ToUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToUid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUid", wireType)
			}
			m.ToUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToUid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationshipService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &FollowItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelationshipService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelationshipService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRelationshipService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRelationshipService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uids) == 0 {
					m.Uids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelationshipService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relation", wireType)
			}
			m.Relation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Relation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowTime", wireType)
			}
			m.FollowTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowedTime", wireType)
			}
			m.FollowedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationshipService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rm == nil {
				m.Rm = make(map[int64]*RelationItem)
			}
			var mapkey int64
			var mapvalue *RelationItem
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelationshipService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelationshipService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelationshipService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRelationshipService
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRelationshipService
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RelationItem{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRelationshipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRelationshipService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rm[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastId", wireType)
			}
			m.LastId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationshipService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = &FollowList{}
			}
			if err := m.List.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelationshipService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelationshipService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRelationshipService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRelationshipService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uids) == 0 {
					m.Uids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelationshipService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowCount", wireType)
			}
			m.FollowCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowerCount", wireType)
			}
			m.FollowerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowerCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationshipService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelationCount == nil {
				m.RelationCount = make(map[int64]*RelationCount)
			}
			var mapkey int64
			var mapvalue *RelationCount
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelationshipService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelationshipService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelationshipService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRelationshipService
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRelationshipService
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RelationCount{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRelationshipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRelationshipService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RelationCount[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserFollowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelationshipService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserFollowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserFollowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelationshipService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fm == nil {
				m.Fm = make(map[int64]*FollowList)
			}
			var mapkey int64
			var mapvalue *FollowList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRelationshipService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelationshipService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRelationshipService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRelationshipService
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthRelationshipService
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FollowList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRelationshipService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthRelationshipService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Fm[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelationshipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRelationshipService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelationshipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelationshipService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelationshipService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRelationshipService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRelationshipService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRelationshipService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRelationshipService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelationshipService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRelationshipService = fmt.Errorf("proto: unexpected end of group")
)
