// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zxq97/relation/app/relationship/pkg/dal/model"
)

func newExtraFollower(db *gorm.DB, opts ...gen.DOOption) extraFollower {
	_extraFollower := extraFollower{}

	_extraFollower.extraFollowerDo.UseDB(db, opts...)
	_extraFollower.extraFollowerDo.UseModel(&model.ExtraFollower{})

	tableName := _extraFollower.extraFollowerDo.TableName()
	_extraFollower.ALL = field.NewAsterisk(tableName)
	_extraFollower.ID = field.NewInt64(tableName, "id")
	_extraFollower.UID = field.NewInt64(tableName, "uid")
	_extraFollower.Stats = field.NewInt32(tableName, "stats")

	_extraFollower.fillFieldMap()

	return _extraFollower
}

type extraFollower struct {
	extraFollowerDo extraFollowerDo

	ALL   field.Asterisk
	ID    field.Int64
	UID   field.Int64
	Stats field.Int32 // 0: no added 1: no deleted

	fieldMap map[string]field.Expr
}

func (e extraFollower) Table(newTableName string) *extraFollower {
	e.extraFollowerDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e extraFollower) As(alias string) *extraFollower {
	e.extraFollowerDo.DO = *(e.extraFollowerDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *extraFollower) updateTableName(table string) *extraFollower {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.UID = field.NewInt64(table, "uid")
	e.Stats = field.NewInt32(table, "stats")

	e.fillFieldMap()

	return e
}

func (e *extraFollower) WithContext(ctx context.Context) *extraFollowerDo {
	return e.extraFollowerDo.WithContext(ctx)
}

func (e extraFollower) TableName() string { return e.extraFollowerDo.TableName() }

func (e extraFollower) Alias() string { return e.extraFollowerDo.Alias() }

func (e *extraFollower) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *extraFollower) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 3)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["stats"] = e.Stats
}

func (e extraFollower) clone(db *gorm.DB) extraFollower {
	e.extraFollowerDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e extraFollower) replaceDB(db *gorm.DB) extraFollower {
	e.extraFollowerDo.ReplaceDB(db)
	return e
}

type extraFollowerDo struct{ gen.DO }

// sql(insert into extra_followers (uid) values (@uid))
func (e extraFollowerDo) InsertFollower(uid int64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	generateSQL.WriteString("insert into extra_followers (uid) values (?) ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(insert into extra_followers (uid, stats) values (@uid, 1))
func (e extraFollowerDo) DeleteFollower(uid int64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	generateSQL.WriteString("insert into extra_followers (uid, stats) values (?, 1) ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(select id, uid, stats from extra_followers limit @limit)
func (e extraFollowerDo) FindUnSyncRecord(limit int64) (result []*model.ExtraFollower, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, limit)
	generateSQL.WriteString("select id, uid, stats from extra_followers limit ? ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(select id, uid, stats from extra_followers where uid=@uid)
func (e extraFollowerDo) FindUnSyncRecordByUID(uid int64) (result []*model.ExtraFollower, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, uid)
	generateSQL.WriteString("select id, uid, stats from extra_followers where uid=? ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// sql(delete from extra_followers where id in (@ids))
func (e extraFollowerDo) DeleteRecord(ids []int64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, ids)
	generateSQL.WriteString("delete from extra_followers where id in (?) ")

	var executeSQL *gorm.DB
	executeSQL = e.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (e extraFollowerDo) Debug() *extraFollowerDo {
	return e.withDO(e.DO.Debug())
}

func (e extraFollowerDo) WithContext(ctx context.Context) *extraFollowerDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e extraFollowerDo) ReadDB() *extraFollowerDo {
	return e.Clauses(dbresolver.Read)
}

func (e extraFollowerDo) WriteDB() *extraFollowerDo {
	return e.Clauses(dbresolver.Write)
}

func (e extraFollowerDo) Session(config *gorm.Session) *extraFollowerDo {
	return e.withDO(e.DO.Session(config))
}

func (e extraFollowerDo) Clauses(conds ...clause.Expression) *extraFollowerDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e extraFollowerDo) Returning(value interface{}, columns ...string) *extraFollowerDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e extraFollowerDo) Not(conds ...gen.Condition) *extraFollowerDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e extraFollowerDo) Or(conds ...gen.Condition) *extraFollowerDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e extraFollowerDo) Select(conds ...field.Expr) *extraFollowerDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e extraFollowerDo) Where(conds ...gen.Condition) *extraFollowerDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e extraFollowerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *extraFollowerDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e extraFollowerDo) Order(conds ...field.Expr) *extraFollowerDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e extraFollowerDo) Distinct(cols ...field.Expr) *extraFollowerDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e extraFollowerDo) Omit(cols ...field.Expr) *extraFollowerDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e extraFollowerDo) Join(table schema.Tabler, on ...field.Expr) *extraFollowerDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e extraFollowerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *extraFollowerDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e extraFollowerDo) RightJoin(table schema.Tabler, on ...field.Expr) *extraFollowerDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e extraFollowerDo) Group(cols ...field.Expr) *extraFollowerDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e extraFollowerDo) Having(conds ...gen.Condition) *extraFollowerDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e extraFollowerDo) Limit(limit int) *extraFollowerDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e extraFollowerDo) Offset(offset int) *extraFollowerDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e extraFollowerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *extraFollowerDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e extraFollowerDo) Unscoped() *extraFollowerDo {
	return e.withDO(e.DO.Unscoped())
}

func (e extraFollowerDo) Create(values ...*model.ExtraFollower) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e extraFollowerDo) CreateInBatches(values []*model.ExtraFollower, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e extraFollowerDo) Save(values ...*model.ExtraFollower) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e extraFollowerDo) First() (*model.ExtraFollower, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExtraFollower), nil
	}
}

func (e extraFollowerDo) Take() (*model.ExtraFollower, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExtraFollower), nil
	}
}

func (e extraFollowerDo) Last() (*model.ExtraFollower, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExtraFollower), nil
	}
}

func (e extraFollowerDo) Find() ([]*model.ExtraFollower, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExtraFollower), err
}

func (e extraFollowerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExtraFollower, err error) {
	buf := make([]*model.ExtraFollower, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e extraFollowerDo) FindInBatches(result *[]*model.ExtraFollower, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e extraFollowerDo) Attrs(attrs ...field.AssignExpr) *extraFollowerDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e extraFollowerDo) Assign(attrs ...field.AssignExpr) *extraFollowerDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e extraFollowerDo) Joins(fields ...field.RelationField) *extraFollowerDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e extraFollowerDo) Preload(fields ...field.RelationField) *extraFollowerDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e extraFollowerDo) FirstOrInit() (*model.ExtraFollower, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExtraFollower), nil
	}
}

func (e extraFollowerDo) FirstOrCreate() (*model.ExtraFollower, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExtraFollower), nil
	}
}

func (e extraFollowerDo) FindByPage(offset int, limit int) (result []*model.ExtraFollower, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e extraFollowerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e extraFollowerDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e extraFollowerDo) Delete(models ...*model.ExtraFollower) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *extraFollowerDo) withDO(do gen.Dao) *extraFollowerDo {
	e.DO = *do.(*gen.DO)
	return e
}
